{"ast":null,"code":"var _jsxFileName = \"/Users/dafinabeqiraj/Desktop/mit-banking-app-master/src/components/CreateAccount.js\",\n    _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport { UserContext } from './UserContext';\nimport { Button, Container } from 'react-bootstrap';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateAccount = () => {\n  _s();\n\n  const [ctx, setCtx] = useContext(UserContext);\n  const {\n    users\n  } = ctx;\n\n  const addUser = ({\n    name,\n    email,\n    password\n  }) => {\n    setCtx({ ...ctx,\n      users: { ...ctx.users,\n        [name]: {\n          name: name,\n          email: email,\n          password: password,\n          balance: 0,\n          history: []\n        }\n      },\n      currentUser: name\n    });\n  };\n\n  const emailRegex = /\\w+@\\w+\\.[a-z]{2,4}$/;\n  const validationSchema = Yup.object({\n    name: Yup.string().test('uniqueness', 'User with this name already exists. Choose another name.', function (value) {\n      const {\n        path,\n        createError\n      } = this;\n\n      if (Object.keys(users).includes(value)) {\n        return createError({\n          path,\n          message: 'User with this name already exists. Choose another name.'\n        });\n      }\n\n      return true;\n    }).required('*Name is required'),\n    email: Yup.string().matches(emailRegex, 'Email format is incorrect.').required('*Email is required'),\n    password: Yup.string().min(8, 'Enter password which is at least 8 characters long.').required('*Password is required')\n  });\n  const btnText = Object.keys(users).length > 0 ? 'Add Another Account' : 'Create Account';\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card text-center border-secondary\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header border-secondary\",\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"card-title\",\n          children: \"CREATE ACCOUNT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            name: '',\n            email: '',\n            password: ''\n          },\n          validationSchema: validationSchema,\n          validateOnChange: false,\n          validateOnBlur: false,\n          onSubmit: (values, {\n            setSubmitting,\n            resetForm\n          }) => {\n            addUser(values);\n            setSubmitting(false);\n            resetForm();\n            setTimeout(function () {\n              alert('Account successfully created!');\n            }, 400);\n          },\n          children: formik => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"field\",\n              htmlFor: \"name\",\n              children: \"Emri\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              id: \"name\",\n              name: \"name\",\n              type: \"text\",\n              autoComplete: \"current-name\",\n              onChange: formik.handleChange,\n              value: formik.values.name,\n              className: formik.errors.name ? \"error-highlight\" : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 33\n            }, this), formik.errors.name ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"validation-error\",\n              children: formik.errors.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 39\n            }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"field\",\n              htmlFor: \"name\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              id: \"email\",\n              name: \"email\",\n              type: \"text\",\n              autoComplete: \"current-email\",\n              onChange: formik.handleChange,\n              value: formik.values.email,\n              className: formik.errors.email ? \"error-highlight\" : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 33\n            }, this), formik.errors.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"validation-error\",\n              children: formik.errors.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 39\n            }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"field\",\n              htmlFor: \"password\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              id: \"password\",\n              name: \"password\",\n              type: \"password\",\n              autoComplete: \"current-password\",\n              onChange: formik.handleChange,\n              value: formik.values.password,\n              className: formik.errors.password ? \"error-highlight\" : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 33\n            }, this), formik.errors.password ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"validation-error\",\n              children: formik.errors.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 39\n            }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"btn-wrapper\",\n              children: !formik.values.name || !formik.values.email || !formik.values.password ? /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-dark\",\n                type: \"submit\",\n                disabled: true,\n                children: btnText\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 43\n              }, this) : /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-dark\",\n                type: \"submit\",\n                children: btnText\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 43\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreateAccount, \"Xug62Xq9mF4uXfDlPlljqRYQPpo=\");\n\n_c = CreateAccount;\nexport default CreateAccount;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAccount\");","map":{"version":3,"sources":["/Users/dafinabeqiraj/Desktop/mit-banking-app-master/src/components/CreateAccount.js"],"names":["useContext","UserContext","Button","Container","Formik","Form","Field","Yup","CreateAccount","ctx","setCtx","users","addUser","name","email","password","balance","history","currentUser","emailRegex","validationSchema","object","string","test","value","path","createError","Object","keys","includes","message","required","matches","min","btnText","length","values","setSubmitting","resetForm","setTimeout","alert","formik","handleChange","errors"],"mappings":"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","sourcesContent":["import { useContext } from 'react'\nimport { UserContext } from './UserContext'\nimport { Button, Container } from 'react-bootstrap'\nimport { Formik, Form, Field } from 'formik'\nimport * as Yup from 'yup'\n\nconst CreateAccount = () => {\n\n    const [ctx, setCtx] = useContext(UserContext)\n\n    const { users } = ctx\n\n    const addUser = ({ name, email, password }) => {\n        setCtx({\n            ...ctx,\n            users: {\n                ...ctx.users,\n                [name]: {\n                    name: name,\n                    email: email,\n                    password: password,\n                    balance: 0,\n                    history: []\n                }\n            },\n            currentUser: name\n        })\n    }\n\n    const emailRegex = /\\w+@\\w+\\.[a-z]{2,4}$/\n\n    const validationSchema = Yup.object({\n        name: Yup.string()\n            .test('uniqueness', 'User with this name already exists. Choose another name.',\n                function (value) {\n                    const { path, createError } = this\n                    if (Object.keys(users).includes(value)) {\n                        return createError({\n                            path,\n                            message: 'User with this name already exists. Choose another name.'\n                        })\n                    }\n                    return true\n                })\n            .required('*Name is required'),\n        email: Yup.string()\n            .matches(emailRegex, 'Email format is incorrect.')\n            .required('*Email is required'),\n        password: Yup.string()\n            .min(8, 'Enter password which is at least 8 characters long.')\n            .required('*Password is required')\n    })\n\n    const btnText = Object.keys(users).length > 0\n        ? 'Add Another Account'\n        : 'Create Account'\n\n    return (\n        <Container className=\"center\">\n            <div className=\"card text-center border-secondary\">\n                <div className=\"card-header border-secondary\">\n                    <h5 className=\"card-title\">CREATE ACCOUNT</h5>\n                </div>\n                <div className=\"card-body\">\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            email: '',\n                            password: '',\n                        }}\n                        validationSchema={validationSchema}\n                        validateOnChange={false}\n                        validateOnBlur={false}\n                        onSubmit={(values, { setSubmitting, resetForm }) => {\n                            addUser(values)\n                            setSubmitting(false)\n                            resetForm()\n                            setTimeout(function () { alert('Account successfully created!'); }, 400);\n                        }}>\n                        {formik => (\n                            <Form>\n                                <label className=\"field\" htmlFor=\"name\">Emri</label>\n                                <Field\n                                    id=\"name\"\n                                    name=\"name\"\n                                    type=\"text\"\n                                    autoComplete=\"current-name\"\n                                    onChange={formik.handleChange}\n                                    value={formik.values.name}\n                                    className={formik.errors.name\n                                        ? \"error-highlight\"\n                                        : null} />\n                                {formik.errors.name\n                                    ? <div className=\"validation-error\">{formik.errors.name}</div>\n                                    : null}\n\n                                <label className=\"field\" htmlFor=\"name\">Email</label>\n                                <Field\n                                    id=\"email\"\n                                    name=\"email\"\n                                    type=\"text\"\n                                    autoComplete=\"current-email\"\n                                    onChange={formik.handleChange}\n                                    value={formik.values.email}\n                                    className={formik.errors.email\n                                        ? \"error-highlight\"\n                                        : null} />\n                                {formik.errors.email\n                                    ? <div className=\"validation-error\">{formik.errors.email}</div>\n                                    : null}\n                                <label className=\"field\" htmlFor=\"password\">Password</label>\n                                <Field\n                                    id=\"password\"\n                                    name=\"password\"\n                                    type=\"password\"\n                                    autoComplete=\"current-password\"\n                                    onChange={formik.handleChange}\n                                    value={formik.values.password}\n                                    className={formik.errors.password\n                                        ? \"error-highlight\"\n                                        : null} />\n                                {formik.errors.password\n                                    ? <div className=\"validation-error\">{formik.errors.password}</div>\n                                    : null}\n                                <div className=\"btn-wrapper\">\n                                    {!formik.values.name || !formik.values.email || !formik.values.password\n                                        ? <Button variant=\"outline-dark\" type=\"submit\" disabled>{btnText}</Button>\n                                        : <Button variant=\"outline-dark\" type=\"submit\">{btnText}</Button>}\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n                </div>\n            </div>\n        </Container >\n    )\n}\n\nexport default CreateAccount"]},"metadata":{},"sourceType":"module"}